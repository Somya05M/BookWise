pipeline {
    agent {
        kubernetes {
            yaml '''
              apiVersion: v1
              kind: Pod
              spec:
                containers:
                - name: docker
                  image: docker:19.03.12
                  command:
                  - cat
                  tty: true
                - name: kubectl
                  image: lachlanevenson/k8s-kubectl:v1.18.0
                  command:
                  - cat
                  tty: true
            '''
        }
    }

    environment {
        DOCKER_IMAGE_NAME_BACKEND = 'bookwise-backend'
        DOCKER_IMAGE_NAME_FRONTEND = 'bookwise-frontend'
        GITHUB_REPO_URL = 'https://github.com/Somya05M/BookWise.git'
        FRONTEND_DEPLOYMENT_FILE = 'frontend-deployment.yml'
        BACKEND_DEPLOYMENT_FILE = 'backend-deployment.yml'
        KUBE_NAMESPACE = 'jenkins'  // Specify your namespace here
    }

    stages {
        stage('Checkout') {
            steps {
                container('docker') {
                    script {
                        // Clone the repository
                        sh "git clone ${GITHUB_REPO_URL} ."
                    }
                }
            }
        }

        stage('Run Docker Containers') {
            steps {
                container('docker') {
                    script {
                        // Run Docker containers to build images
                        sh "docker-compose up -d --build"
                    }
                }
            }
        }

        stage('Push Docker Images Frontend') {
            steps {
                container('docker') {
                    script {
                        docker.withRegistry('', 'DockerHubCred') {
                            // Tag and push Frontend Docker image to Docker Hub
                            sh "docker tag ${DOCKER_IMAGE_NAME_FRONTEND} somya2001/${DOCKER_IMAGE_NAME_FRONTEND}:latest"
                            sh "docker push somya2001/${DOCKER_IMAGE_NAME_FRONTEND}"
                        }
                    }
                }
            }
        }

        stage('Push Docker Images Backend') {
            steps {
                container('docker') {
                    script {
                        docker.withRegistry('', 'DockerHubCred') {
                            // Tag and push Backend Docker image to Docker Hub
                            sh "docker tag ${DOCKER_IMAGE_NAME_BACKEND} somya2001/${DOCKER_IMAGE_NAME_BACKEND}:latest"
                            sh "docker push somya2001/${DOCKER_IMAGE_NAME_BACKEND}"
                        }
                    }
                }
            }
        }

        stage('Unit Test') {
            steps {
                container('docker') {
                    script {
                        // Run the Python test script directly
                        sh "python3 test.py"
                    }
                }
            }
        }

        stage('Deploy Frontend to Kubernetes') {
            steps {
                container('kubectl') {
                    script {
                        // Retrieve Kubernetes configuration from Jenkins credentials
                        withCredentials([string(credentialsId: 'jenkins-secret', variable: 'KUBECONFIG')]) {
                            // Set KUBECONFIG environment variable
                            sh "export KUBECONFIG=\$KUBECONFIG"

                            // Check the value of KUBECONFIG
                            sh "echo \$KUBECONFIG"

                            // Deploy frontend to Kubernetes
                            sh "kubectl apply -f ${FRONTEND_DEPLOYMENT_FILE} -n ${KUBE_NAMESPACE}"
                        }
                    }
                }
            }
        }

        stage('Deploy Backend to Kubernetes') {
            steps {
                container('kubectl') {
                    script {
                        // Retrieve Kubernetes configuration from Jenkins credentials
                        withCredentials([string(credentialsId: 'jenkins-secret', variable: 'KUBECONFIG')]) {
                            // Set KUBECONFIG environment variable
                            sh "export KUBECONFIG=\$KUBECONFIG"

                            // Check the value of KUBECONFIG
                            sh "echo \$KUBECONFIG"

                            // Deploy backend to Kubernetes
                            sh "kubectl apply -f ${BACKEND_DEPLOYMENT_FILE} -n ${KUBE_NAMESPACE}"
                        }
                    }
                }
            }
        }
    }
}
