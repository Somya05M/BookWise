pipeline {
    agent {
        kubernetes {
            yaml '''
                apiVersion: v1
                kind: Pod
                spec:
                  containers:
                  - name: frontend-builder
                    image: 'docker:19.03.13'
                    command:
                    - cat
                    tty: true
                    volumeMounts:
                    - name: dockersock
                      mountPath: /var/run/docker.sock
                  - name: backend-builder
                    image: 'docker:19.03.13'
                    command:
                    - cat
                    tty: true
                    volumeMounts:
                    - name: dockersock
                      mountPath: /var/run/docker.sock
                  volumes:
                  - name: dockersock
                    hostPath:
                      path: /var/run/docker.sock
            '''
        }
    }

    environment {
        DOCKER_IMAGE_NAME_BACKEND = 'bookwise-backend'
        DOCKER_IMAGE_NAME_FRONTEND = 'bookwise-frontend'
        GITHUB_REPO_URL = 'https://github.com/Somya05M/BookWise.git'
        FRONTEND_DEPLOYMENT_FILE = 'frontend-deployment.yml'
        BACKEND_DEPLOYMENT_FILE = 'backend-deployment.yml'
        KUBE_NAMESPACE = 'jenkins'
        KUBE_CONTEXT = 'your-kube-context'  // Specify your Kubernetes context here
    }

    stages {
        stage('Run Docker Containers') {
            steps {
                script {
                    try {
                        // Run Docker containers to build images
                        sh "docker build -t ${DOCKER_IMAGE_NAME_BACKEND} ."
                        sh "docker build -t ${DOCKER_IMAGE_NAME_FRONTEND} ."
                    } catch (Exception e) {
                        error "Failed to run Docker containers: ${e.message}"
                    }
                }
            }
        }

        stage('Build and Push Docker Images Frontend') {
            steps {
                container('frontend-builder') {
                    script {
                        try {
                            // Build and push Frontend Docker image to Docker Hub
                            sh "docker build -t somya2001/${DOCKER_IMAGE_NAME_FRONTEND}:latest ."
                            sh "docker push somya2001/${DOCKER_IMAGE_NAME_FRONTEND}:latest"
                        } catch (Exception e) {
                            error "Failed to build and push Frontend Docker image: ${e.message}"
                        }
                    }
                }
            }
        }

        stage('Build and Push Docker Images Backend') {
            steps {
                container('backend-builder') {
                    script {
                        try {
                            // Build and push Backend Docker image to Docker Hub
                            sh "docker build -t somya2001/${DOCKER_IMAGE_NAME_BACKEND}:latest ."
                            sh "docker push somya2001/${DOCKER_IMAGE_NAME_BACKEND}:latest"
                        } catch (Exception e) {
                            error "Failed to build and push Backend Docker image: ${e.message}"
                        }
                    }
                }
            }
        }

        stage('Unit Test') {
            steps {
                container('backend-builder') {
                    script {
                        try {
                            // Run the Python test script directly
                            sh "python3 test.py"
                        } catch (Exception e) {
                            error "Unit tests failed: ${e.message}"
                        }
                    }
                }
            }
        }

        stage('Deploy Frontend to Kubernetes') {
            steps {
                container('frontend-builder') {
                    script {
                        try {
                            // Deploy frontend to Kubernetes
                            sh "kubectl apply -f ${env.FRONTEND_DEPLOYMENT_FILE} -n ${env.KUBE_NAMESPACE} --context=${KUBE_CONTEXT}"
                        } catch (Exception e) {
                            error "Failed to deploy frontend to Kubernetes: ${e.message}"
                        }
                    }
                }
            }
        }

        stage('Deploy Backend to Kubernetes') {
            steps {
                container('backend-builder') {
                    script {
                        try {
                            // Deploy backend to Kubernetes
                            sh "kubectl apply -f ${env.BACKEND_DEPLOYMENT_FILE} -n ${env.KUBE_NAMESPACE} --context=${KUBE_CONTEXT}"
                        } catch (Exception e) {
                            error "Failed to deploy backend to Kubernetes: ${e.message}"
                        }
                    }
                }
            }
        }
    }
}
