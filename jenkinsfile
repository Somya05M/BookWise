pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME_BACKEND = 'bookwise-backend'
        DOCKER_IMAGE_NAME_FRONTEND = 'bookwise-frontend'
        GITHUB_REPO_URL = 'https://github.com/Somya05M/BookWise.git'
        FRONTEND_DEPLOYMENT_FILE = 'frontend-deployment.yml'
        BACKEND_DEPLOYMENT_FILE = 'backend-deployment.yml'
        KUBE_NAMESPACE = 'jenkins'  // Specify your namespace here
    }

stages {
        stage('Setup Kubernetes Resources') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'jenkins-secret')]) {
                        try {
                            // Create service account with admin permissions
                            sh """
                            kubectl apply -f ./kubernetes/jenkins/service-account.yml -n ${env.KUBE_NAMESPACE}
                            """

                            sh """
                            kubectl apply -f ./kubernetes/jenkins/cluster-role-binding.yml -n ${env.KUBE_NAMESPACE}
                            """

                            // Create local persistent volume
                            sh """
                            kubectl apply -f ./kubernetes/jenkins/persistent-volume.yml -n ${env.KUBE_NAMESPACE}
                            """

                            sh """
                            kubectl apply -f ./kubernetes/jenkins/persistent-volume-claim.yml -n ${env.KUBE_NAMESPACE}
                            """
                        } catch (Exception e) {
                            error "Failed to setup Kubernetes resources: ${e.message}"
                        }
                    }
                }
            }
        }

        stage('Run Docker Containers') {
            steps {
                script {
                    try {
                        // Run Docker containers to build images
                        sh "docker-compose up -d --build"
                    } catch (Exception e) {
                        error "Failed to run Docker containers: ${e.message}"
                    }
                }
            }
        }

        stage('Push Docker Images Frontend') {
            steps {
                script {
                    docker.withRegistry('', 'DockerHubCred') {
                        try {
                            // Tag and push Frontend Docker image to Docker Hub
                            sh "docker tag ${DOCKER_IMAGE_NAME_FRONTEND} somya2001/${DOCKER_IMAGE_NAME_FRONTEND}:latest"
                            sh "docker push somya2001/${DOCKER_IMAGE_NAME_FRONTEND}"
                        } catch (Exception e) {
                            error "Failed to push Frontend Docker image: ${e.message}"
                        }
                    }
                }
            }
        }

        stage('Push Docker Images Backend') {
            steps {
                script {
                    docker.withRegistry('', 'DockerHubCred') {
                        try {
                            // Tag and push Backend Docker image to Docker Hub
                            sh "docker tag ${DOCKER_IMAGE_NAME_BACKEND} somya2001/${DOCKER_IMAGE_NAME_BACKEND}:latest"
                            sh "docker push somya2001/${DOCKER_IMAGE_NAME_BACKEND}"
                        } catch (Exception e) {
                            error "Failed to push Backend Docker image: ${e.message}"
                        }
                    }
                }
            }
        }

        stage('Unit Test') {
            steps {
                script {
                    try {
                        // Run the Python test script directly
                        sh "python3 test.py"
                    } catch (Exception e) {
                        error "Unit tests failed: ${e.message}"
                    }
                }
            }
        }

        stage('Deploy Frontend to Kubernetes') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'jenkins-secret')]) {
                        try {
                            // Ensure the environment variables are accessible within the script block
                            sh "kubectl apply -f ./kubernetes/frontend/${env.FRONTEND_DEPLOYMENT_FILE} -n ${env.KUBE_NAMESPACE}"
                        } catch (Exception e) {
                            error "Failed to deploy frontend to Kubernetes: ${e.message}"
                        }
                    }
                }
            }
        }

        stage('Deploy Backend to Kubernetes') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'jenkins-secret')]) {
                        try {
                            // Ensure the environment variables are accessible within the script block
                            sh "kubectl apply -f ./kubernetes/backend/${env.BACKEND_DEPLOYMENT_FILE} -n ${env.KUBE_NAMESPACE}"
                        } catch (Exception e) {
                            error "Failed to deploy backend to Kubernetes: ${e.message}"
                        }
                    }
                }
            }
        }
    }
}